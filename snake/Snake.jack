// The main component of snake game.

/** Implementation of snake object*/
class Snake {
     
    field int x, y;     // Location of the head of the snake the screen.
    field int v;        // Velocity of the snake.
    field int d;        // Directon of the snake; 0 stands for right 1 for up 2 for left 3 for down.
    field Array body;   // The pixes that represents the snake.
    field int length;   // Length of the snake.
    field int direction;
    
    static int volume;  // Number of pixels that a chunk is consisted of.
    
    /** Construct a new instance of snake from a given
     *  length and the head loaction */
    constructor Snake new(int l, int p_x, int p_y) {
        var Tuple temp;
        let x = p_x;
        let y = p_y;
        let d = 0;
        let length = l;
        let body = Array.new(length);
        
        while (l > 0) {
            let body[l - 1] = Tuple.new(p_x, p_y);
            let temp = body[l-1];
            // do temp.print();
            let p_x = p_x - Math.sqrt(volume); 
            let l = l - 1;
        }
        return this;
    }
    
    /** Initialize the static variables */
    function void init() {
        let volume = 36;
        return;
    }
    
    /** Return the volume of a section of snake */
    function int get_volume() {
        return volume;
    }
    
    
    /* Draw the snake on screen */
    method void draw() {
        var int num_iter;
        let num_iter = length;
        do Screen.clearScreen();
        while (num_iter > 0) {
            do HelperFuncs.draw_square(volume, body[num_iter - 1]);
            let num_iter = num_iter - 1;
        }
        
        return;
    }
    
    /** Turning the direction the snake  */
    method void turn(int direction) {
        var int diff;
        let diff = d - direction;
        if (d = direction) {return;}
        if ( (Math.abs(diff) = 1 ) | (Math.abs(diff) = 3) ) {
            let d = direction;
        }
        return;
    }
    
    /** The snake grows if it gets a food */
    method void grow() {
    
        var Array new_body;
        var Tuple new_part;
        var int num_iter;
        var Tuple part;
        
        let part = body[0];
        let length = length + 1;
        let new_body = Array.new(length);
        let new_part = Tuple.new((part.get_x() - Math.sqrt(volume)), part.get_y());
        let new_body[0] = new_part;
        
        
        let num_iter = length;
        while (num_iter > 1) {
            let new_body[num_iter - 1] = body[num_iter - 2];
            let num_iter = num_iter - 1;
        }
        let body = new_body;
        return;
    }
    
    /** Move the snake forward a unit */
    method void forward() {
    
        var int num_iter;
        var Tuple new_head;
        var Tuple part;
        var Tuple old_part;
        
        let num_iter = 0;
        let old_part = body[0];
        do old_part.dispose();
        
        // Update the snake's position and its new head.
        if(d = 0) { let new_head = Tuple.new(x + Math.sqrt(volume), y); let x = x + Math.sqrt(volume);}
        if(d = 1) { let new_head = Tuple.new(x, y - Math.sqrt(volume)); let y = y - Math.sqrt(volume);}
        if(d = 2) { let new_head = Tuple.new(x - Math.sqrt(volume), y); let x = x - Math.sqrt(volume);}
        if(d = 3) { let new_head = Tuple.new(x, y + Math.sqrt(volume)); let y = y + Math.sqrt(volume);}
        
        while(num_iter < (length - 1)) {            
            let part = body[num_iter + 1];
            // do part.print();
            let body[num_iter] = part;
            let num_iter = num_iter + 1;
        }
        let body[length - 1] = new_head;
        
        return;
    }
    
    /* Return the position of the snake */
    method Tuple report_pos() {
        var Tuple pos;
        let pos = Tuple.new(x, y);
        return pos;
    }
    
    /** Return the length of the snake */
    method int report_length() {
        return length;
    }
    
    /** Check if the snake hit itself */
    method boolean tangled() {
        var int num_iter;
        var Tuple head_pos;
        let head_pos = body[0];
        let num_iter = 0;
        while (num_iter < length - 1) {
            if (head_pos.equals(body[num_iter])) {return true;}
            let num_iter = num_iter + 1;
        }
        return false;
   }
    
    /** Delete the snake */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    
        
    /** Unit test */
    function void main() {
        var Snake s;
        var char key;
        var int wait;
        do Snake.init();
        let s = Snake.new(10, 200, 100);
        while(true) {
            let key = 0;
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do s.forward();
                let key = Keyboard.keyPressed();
                do s.draw();
                let key = Keyboard.keyPressed();
                let wait = 0;
                while (wait < 5000) {
                    let key = Keyboard.keyPressed();
                    let wait = wait + 1;
                }
          }
            //do s.grow();
            //do s.draw();
            if (key = 130) {do s.turn(2);}
            if (key = 131) {do s.turn(1);}
            if (key = 132) {do s.turn(0);}
            if (key = 133) {do s.turn(3);}
        }
        return;
    }
}
